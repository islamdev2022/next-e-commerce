generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  picture1    String
  picture2    String
  picture3    String
  anime       String
  createdAt   DateTime    @default(now())

  cartItems   CartItem[]  @relation("ProductCartItems")
  orderItems  OrderItem[] @relation("ProductOrderItems")
}

model Cart {
  id        Int        @id @default(autoincrement())
  sessionId String     @unique // Unique identifier for each cart session (for users not signed in)
  createdAt DateTime   @default(now())
  cartItems CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)

  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation("ProductCartItems", fields: [productId], references: [id])

  @@unique([cartId, productId]) // Prevents the same product from being added multiple times
}

model Order {
  id               Int         @id @default(autoincrement())
  totalPrice       Float
  orderDate        DateTime    @default(now())
  orderState       OrderState  @default(PENDING)
  destination      String      // Address details for shipping
  Name         String      // Captures the user's name at checkout
  Email        String      // Captures the user's email at checkout
  Phone        String      // Captures the user's phone number at checkout
  updatedByAdminId Int?      
  updatedAt        DateTime?  

  orderItems       OrderItem[] @relation("OrderOrderItems")
  updatedByAdmin   Admin?      @relation("AdminOrders", fields: [updatedByAdminId], references: [id])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int      @default(1)

  order     Order    @relation("OrderOrderItems", fields: [orderId], references: [id])
  product   Product  @relation("ProductOrderItems", fields: [productId], references: [id])

  @@unique([orderId, productId]) // Prevents the same product from being added multiple times
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String?  @unique
  password  String   // Store hashed password for security
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]  @relation("AdminOrders")
}

enum OrderState {
  PENDING
  COMPLETED
  CANCELED
}
