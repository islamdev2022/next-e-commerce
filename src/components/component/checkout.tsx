/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/l5GB7XchB3u
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Chivo } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { useSearchParams } from "next/navigation";
import { useEffect, useState } from 'react';

export function Checkout() {
  interface Product {
    id: string;
    name: string;
    price: number;
    quantity: number;
  }
  
  const [productDetails, setProductDetails] = useState<Product[]>([]);

  // Shipping cost
  const shipping = 500;

  // Calculate subtotal and total
  const subtotal = productDetails.reduce((acc, item) => acc + (item.price * item.quantity), 0);
  const total = subtotal + shipping;

  const searchParams = useSearchParams();

  useEffect(() => {
    const items = searchParams.get('items');
    if (items) {
      try {
        const decodedProductDetails = decodeURIComponent(items);
        const parsedProductDetails = JSON.parse(decodedProductDetails);
        setProductDetails(parsedProductDetails);
      } catch (error) {
        console.error('Error parsing product details:', error);
      }
    }
  }, [searchParams]);

  return (
    <div className="container mx-auto max-w-4xl py-12 px-4 md:px-6">
      <div className="grid md:grid-cols-2 gap-8">
        <div className="space-y-6">
          <h1 className="text-3xl font-bold">Checkout</h1>
          <form className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="fullName">Full Name</Label>
                <Input id="fullName" placeholder="John Doe" />
              </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input id="email" type="email" placeholder="john@example.com" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="address">Destination Address</Label>
              <Textarea id="address" rows={3} placeholder="123 Main St, Anytown USA" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="shippingMethod">Shipping Method</Label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Select shipping method" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="office">Delivery Company office</SelectItem>
                  <SelectItem value="Home">Home Shipping</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <Button type="submit" className="w-full">
              Place Order
            </Button>
          </form>
        </div>
        <div className="space-y-6">
          <h2 className="text-2xl font-bold">Order Summary</h2>
          <Card>
            <CardHeader>
              <CardTitle>Items in Cart</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {productDetails.map((item) => (
                <div key={item?.id} className="flex items-center justify-between">
                  <div>
                    <h3 className="font-medium">{item.name}</h3>
                    <p className="text-muted-foreground">Quantity: {item.quantity}</p>
                  </div>
                  <div className="text-right">
                    <p className="font-medium">{item.price.toFixed(2)} DA</p>
                    <p className="text-muted-foreground">{(item.price * item.quantity).toFixed(2)} DA</p>
                  </div>
                </div>
              ))}
            </CardContent>
            <Separator />
            <CardContent className="space-y-2">
              <div className="flex items-center justify-between">
                <p>Subtotal</p>
                <p className="font-medium">{subtotal.toFixed(2)} DA</p>
              </div>
              <div className="flex items-center justify-between">
                <p>Shipping</p>
                <p className="font-medium">{shipping.toFixed(2)} DA</p>
              </div>
            </CardContent>
            <Separator />
            <CardFooter className="flex items-center justify-between">
              <p className="text-lg font-bold">Total</p>
              <p className="text-lg font-bold">{total.toFixed(2)} DA</p>
            </CardFooter>
          </Card>
        </div>
      </div>
    </div>
  );
}
